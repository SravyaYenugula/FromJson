{"ast":null,"code":"var _jsxFileName = \"/home/sravya/Task/sample/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Input, Select, Modal, Table, Button, Tag } from 'antd';\nimport { EditOutlined, DeleteOutlined, SearchOutlined } from '@ant-design/icons';\nimport { Row, Col, DatePicker, Space } from 'antd';\nimport { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport data from './records.json';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  TextArea\n} = Input;\n\nconst App = () => {\n  _s();\n\n  const names = ['sravya', 'ram', 'ramya', 'naresh', 'krishna', 'ganesh', 'vamshi'];\n  const status = ['low', 'medium', 'high'];\n  const [form] = Form.useForm();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingStudent, setEditingStudent] = useState(null);\n  const [editRow, setEditRow] = useState(null); //  const [searchInput, setSearchInput] = useState('')\n  //    const data=[\n  //     {\n  //       key: '1',\n  //       taskName: 'sales order',\n  //       dueDate:\"2022-02-24\" ,\n  //       assigned: 'sravya',\n  //       status: \"high\",\n  //       description:\"good\"\n  //     },\n  //     // {\n  //     //   key: '2',\n  //     //   taskName: 'Stock Allocation',\n  //     //   dueDate:\"2022-02-24\" ,\n  //     //   assigned: 'ravi',\n  //     //   status: \"high\",\n  //     //   description:\"very good\"\n  //     // }\n  //    ]\n  //    const [dataSource, setDataSource] = useState(data)\n  //    const [newData,setNewData]=useState(data)\n  //    const [newSearch,setNewSearch]=useState(data)\n  //    const [nameData,setnameData]=useState(\"\")\n  //    const [isModalVisible, setIsModalVisible] = useState(false);\n  //    const [isModalVisibleCheck, setIsModalVisibleCheck] = useState(false)\n  //    const [selectedRowKeys,setSelectedRowKeys ] =useState([])\n  //    const hasSelected = selectedRowKeys.length > 0;\n  //    console.log(hasSelected)\n  //    const [onCheckBoxData,setOnCheckBoxData]=useState('')\n  //    const [newDataTo,setnewDataTo]=useState([])\n  //    const onChange=(date, dateString)=> {\n  //    const mydate=moment().format('YYYY-MM-d'); \n  //     console.log(mydate)\n  //     console.log(date,dateString);\n  //   }\n  //    const showModal = () => {\n  //     setIsModalVisible(true);\n  //   };\n  //  const handleFinish=(value)=>{\n  //      console.log(value.dueDate)\n  //      //form.submit()\n  //      const obj={\n  //      key:`${data.length + 1}`,\n  //       taskName: `${value.TaskName}`,\n  //       dueDate:`${moment(value.dueDate).format('YYYY-MM-d')}`,\n  //       assigned:`${value.AssignedTo}`,\n  //       status: `${value.status}`,\n  //       description:`${value.Description}`,\n  //     }\n  //     //console.log(obj)\n  //     const updateData=[...newData]\n  //     updateData.push(obj)\n  //     setNewData(updateData)  \n  //   }\n  //   const handleOk = () => { \n  //     // console.log(form)\n  //     // const formdata=form.getFieldValue(true)\n  //     // console.log(formdata)\n  //     setIsModalVisible(false);\n  //      form.submit()\n  //   };\n  //   const handleCancel = () => {\n  //     setIsModalVisible(false);\n  //   };\n  //   const onDeletrecord=(record)=>{\n  //     Modal.confirm({\n  //       title:\"Are are u sure want delete student record?\",\n  //       okText:\"Yes\",\n  //        okType:\"danger\",\n  //        onOk :()=>{\n  //         setNewData(pre=>{\n  //           return pre.filter((student)=>student.id !==record.id);\n  //         });\n  //         //console.log(\"click\",records)\n  //        }\n  //   })\n  //   };\n  //   const onEditStudent=(records)=>{\n  //     setIsEditing(true)\n  //     setEditingStudent({...records})\n  //   }\n  //   const restStudentDetails=()=>{\n  //     setIsEditing(false) \n  //     setEditingStudent(null)\n  //   }\n  // const onTaskname=(e)=>{\n  //   {setEditingStudent(pre=>{console.log(\"hello\",pre)\n  //       return {...pre,taskName:e.target.value}\n  //     })}\n  // }\n  //  const columns = [\n  //   {\n  //     title: 'Task Name',\n  //     dataIndex: 'taskName',\n  //     key: 'task name',\n  //     render:(text,record)=>{\n  //       if(editRow===record.key){\n  //         return( <Form.Item\n  //         name=\"taskName\"\n  //         rules={[{\n  //               required:true,\n  //               message:' task name is reqired',\n  //             }]}>\n  //            <Input  \n  //            style={{width:'200px'}} \n  //           //    onChange={(e)=>{setEditingStudent(pre=>{\n  //           //    return {...pre,taskName:e.target.value}\n  //           //  })}}\n  //            />\n  //            </Form.Item>)\n  //         }else{\n  //           return <p>{text}</p>\n  //         } \n  //     } ,  \n  //     filters: [\n  //       {\n  //         text: 'sales order',\n  //         value: 'sales order',\n  //       },\n  //     ],\n  //     onFilter:(value,record)=>{\n  //       return record.taskName===value\n  //     }\n  //   },\n  //   {\n  //     title: 'Due Date',\n  //     dataIndex: 'dueDate',\n  //     key: 'due date',\n  //   },\n  //   {\n  //     title: 'Assigned To',\n  //     dataIndex: 'assigned',\n  //     key: 'assigned to',\n  //     filters: [\n  //       {\n  //         text: 'sravya',\n  //         value: 'sravya',\n  //       },\n  //     ],\n  //     onFilter:(value,record)=>{\n  //       return record.assigned===value\n  //     }\n  //   },\n  //  {\n  //   title: 'status',\n  //   dataIndex: 'status',\n  //   key: 'status',\n  //       filters: [\n  //         {\n  //           text: 'high',\n  //           value: 'high',\n  //         },\n  //       ],\n  //       onFilter:(value,record)=>{\n  //         return record.status===value\n  //       }\n  // },\n  // {\n  //   title: 'Description',\n  //   dataIndex: 'description',\n  //   key: 'description',\n  // },\n  // {\n  //   title: 'Action',\n  //   key: 'action',\n  //   render:(record)=>{\n  //     return(\n  //       <>\n  //       <EditOutlined  onClick={()=>onEditStudent(record)}/>\n  //        <DeleteOutlined  onClick={()=>onDeletrecord(record)} style={{color:'red' ,marginLeft:12}} \n  //         /> \n  //       </>\n  //     )\n  //   }\n  // },\n  // ];\n\n  /*const onFinish = (values) => {\n    console.log('Finish:', values);\n  };*/\n  //  const onChangeSearchInput=(event)=>{\n  //      const searchInput=event.target.value\n  //      console.log(\"==============\",searchInput)\n  //   //  console.log('click')\n  //   //  {data.map(eachTable=>eachTable. taskName)}\n  //   const result=newData.filter((eachValue)=>\n  //  {\n  //   //  console.log(eachValue.Object.keys(eachValue)[1])\n  //   //  console.log(Object.keys(eachValue).length)\n  //   //   for(let i=1;i<Object.keys(eachValue).length;i++){   \n  //   //     console.log( eachValue[`${Object.keys(eachValue)[i]}`] )\n  //   //     return  eachValue[`${Object.keys(eachValue)[i]}`].toLowerCase().includes(searchInput.toLowerCase())\n  //   //     }\n  //          if(searchInput===\"\"){\n  //          console.log(\"------\",newSearch)\n  //          setNewData(newSearch)\n  //            return eachValue\n  //          }else if(eachValue.taskName.toLowerCase().includes(searchInput.toLowerCase()) ||\n  //          eachValue.assigned.toLowerCase().includes(searchInput.toLowerCase()) ||\n  //          eachValue.status.toLowerCase().includes(searchInput.toLowerCase()) ||\n  //          eachValue.description.toLowerCase().includes(searchInput.toLowerCase())){\n  //            return eachValue\n  //          }\n  //      }\n  //     )\n  //    console.log(result)\n  //    setNewData(result)\n  //  }\n\n  const showModelCheck = () => {\n    setIsModalVisibleCheck(true);\n  };\n\n  const onCheckBox = () => {\n    setIsModalVisibleCheck(false);\n  };\n\n  const onCheckCancle = () => {\n    setIsModalVisibleCheck(false);\n  };\n\n  const onFinishEditRow = values => {\n    console.log(\"editroe\", values);\n    const updateDataEditRow = [...dataSource];\n    updateDataEditRow.splice(editRow, 1, { ...values,\n      key: editRow\n    });\n    setDataSource(updateDataEditRow);\n    console.log(\"ywo\", updateDataEditRow);\n    setEditRow(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"m8BwsvFDBUgc9kNGYemTmBVy8D4=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/sravya/Task/sample/src/App.js"],"names":["Form","Input","Select","Modal","Table","Button","Tag","EditOutlined","DeleteOutlined","SearchOutlined","Row","Col","DatePicker","Space","useEffect","useState","moment","data","TextArea","App","names","status","form","useForm","isEditing","setIsEditing","editingStudent","setEditingStudent","editRow","setEditRow","showModelCheck","setIsModalVisibleCheck","onCheckBox","onCheckCancle","onFinishEditRow","values","console","log","updateDataEditRow","dataSource","splice","key","setDataSource"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,KAAf,EAAqBC,MAArB,EAA4BC,KAA5B,EAAkCC,KAAlC,EAAwCC,MAAxC,EAAgDC,GAAhD,QAA2D,MAA3D;AACA,SAAOC,YAAP,EAAoBC,cAApB,EAAmCC,cAAnC,QAAwD,mBAAxD;AACA,SAASC,GAAT,EAAcC,GAAd,EAAkBC,UAAlB,EAA8BC,KAA9B,QAA2C,MAA3C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AAEA,OAAO,WAAP;AACA,OAAO,oBAAP;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAejB,KAArB;;AAGA,MAAMkB,GAAG,GAAC,MAAK;AAAA;;AACb,QAAOC,KAAK,GAAC,CAAC,QAAD,EAAU,KAAV,EAAgB,OAAhB,EAAwB,QAAxB,EAAiC,SAAjC,EAA2C,QAA3C,EAAoD,QAApD,CAAb;AACA,QAAMC,MAAM,GAAC,CAAC,KAAD,EAAO,QAAP,EAAgB,MAAhB,CAAb;AACA,QAAM,CAACC,IAAD,IAAQtB,IAAI,CAACuB,OAAL,EAAd;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,cAAD,EAAgBC,iBAAhB,IAAoCZ,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC,CAPae,cAAc,GAAC,MAAI;AACxBC,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,GAFA;;AAGD,QAAMC,UAAU,GAAC,MAAI;AACjBD,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACH,GAFD;;AAGA,QAAME,aAAa,GAAC,MAAI;AACrBF,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACF,GAFD;;AAIA,QAAMG,eAAe,GAAEC,MAAD,IAAU;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,MAAtB;AACD,UAAMG,iBAAiB,GAAC,CAAC,GAAGC,UAAJ,CAAxB;AACAD,IAAAA,iBAAiB,CAACE,MAAlB,CAAyBZ,OAAzB,EAAiC,CAAjC,EAAoC,EAAC,GAAGO,MAAJ;AAAYM,MAAAA,GAAG,EAACb;AAAhB,KAApC;AACAc,IAAAA,aAAa,CAACJ,iBAAD,CAAb;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBC,iBAAlB;AACAT,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,GAPD;;AASE,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADF;AA4LD,CAndD;;GAAMV,G;UAGUnB,IAAI,CAACuB,O;;;KAHfJ,G;AAqdN,eAAeA,GAAf","sourcesContent":["import { Form, Input,Select,Modal,Table,Button, Tag } from 'antd';\nimport{EditOutlined,DeleteOutlined,SearchOutlined }from '@ant-design/icons';\nimport { Row, Col,DatePicker, Space } from 'antd';\nimport { useEffect, useState } from 'react';\nimport moment from 'moment'\nimport data from './records.json'\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst { TextArea } = Input;\n\n\nconst App=()=> {\n  const  names=['sravya','ram','ramya','naresh','krishna','ganesh','vamshi']\n  const status=['low','medium','high']\n  const [form] =Form.useForm();\n\n  const [isEditing, setIsEditing] = useState(false)\n  const [editingStudent,setEditingStudent]= useState(null)\n  const [editRow, setEditRow] = useState(null)\n      //  const [searchInput, setSearchInput] = useState('')\n\n      \n//    const data=[\n//     {\n//       key: '1',\n//       taskName: 'sales order',\n//       dueDate:\"2022-02-24\" ,\n//       assigned: 'sravya',\n//       status: \"high\",\n//       description:\"good\"\n//     },\n//     // {\n//     //   key: '2',\n//     //   taskName: 'Stock Allocation',\n//     //   dueDate:\"2022-02-24\" ,\n//     //   assigned: 'ravi',\n//     //   status: \"high\",\n//     //   description:\"very good\"\n//     // }\n    \n//    ]\n//    const [dataSource, setDataSource] = useState(data)\n//    const [newData,setNewData]=useState(data)\n//    const [newSearch,setNewSearch]=useState(data)\n//    const [nameData,setnameData]=useState(\"\")\n//    const [isModalVisible, setIsModalVisible] = useState(false);\n//    const [isModalVisibleCheck, setIsModalVisibleCheck] = useState(false)\n//    const [selectedRowKeys,setSelectedRowKeys ] =useState([])\n//    const hasSelected = selectedRowKeys.length > 0;\n//    console.log(hasSelected)\n//    const [onCheckBoxData,setOnCheckBoxData]=useState('')\n//    const [newDataTo,setnewDataTo]=useState([])\n\n//    const onChange=(date, dateString)=> {\n//    const mydate=moment().format('YYYY-MM-d'); \n//     console.log(mydate)\n    \n//     console.log(date,dateString);\n  \n//   }\n\n//    const showModal = () => {\n//     setIsModalVisible(true);\n//   };\n  \n//  const handleFinish=(value)=>{\n//      console.log(value.dueDate)\n//      //form.submit()\n//      const obj={\n//      key:`${data.length + 1}`,\n//       taskName: `${value.TaskName}`,\n//       dueDate:`${moment(value.dueDate).format('YYYY-MM-d')}`,\n//       assigned:`${value.AssignedTo}`,\n//       status: `${value.status}`,\n//       description:`${value.Description}`,\n//     }\n//     //console.log(obj)\n//     const updateData=[...newData]\n//     updateData.push(obj)\n//     setNewData(updateData)  \n\n//   }\n\n//   const handleOk = () => { \n  \n//     // console.log(form)\n//     // const formdata=form.getFieldValue(true)\n//     // console.log(formdata)\n//     setIsModalVisible(false);\n//      form.submit()\n//   };\n\n//   const handleCancel = () => {\n//     setIsModalVisible(false);\n//   };\n\n//   const onDeletrecord=(record)=>{\n\n//     Modal.confirm({\n     \n//       title:\"Are are u sure want delete student record?\",\n//       okText:\"Yes\",\n//        okType:\"danger\",\n//        onOk :()=>{\n//         setNewData(pre=>{\n         \n//           return pre.filter((student)=>student.id !==record.id);\n          \n//         });\n//         //console.log(\"click\",records)\n//        }\n//   })\n  \n//   };\n//   const onEditStudent=(records)=>{\n//     setIsEditing(true)\n//     setEditingStudent({...records})\n    \n//   }\n//   const restStudentDetails=()=>{\n//     setIsEditing(false) \n//     setEditingStudent(null)\n//   }\n \n// const onTaskname=(e)=>{\n//   {setEditingStudent(pre=>{console.log(\"hello\",pre)\n//       return {...pre,taskName:e.target.value}\n//     })}\n \n \n  \n// }\n\n\n//  const columns = [\n//   {\n//     title: 'Task Name',\n//     dataIndex: 'taskName',\n//     key: 'task name',\n  \n//     render:(text,record)=>{\n//       if(editRow===record.key){\n\n//         return( <Form.Item\n//         name=\"taskName\"\n//         rules={[{\n//               required:true,\n//               message:' task name is reqired',\n//             }]}>\n   \n//            <Input  \n             \n//            style={{width:'200px'}} \n//           //    onChange={(e)=>{setEditingStudent(pre=>{\n//           //    return {...pre,taskName:e.target.value}\n//           //  })}}\n             \n//            />\n//            </Form.Item>)\n//         }else{\n//           return <p>{text}</p>\n//         } \n//     } ,  \n\n//     filters: [\n//       {\n//         text: 'sales order',\n//         value: 'sales order',\n//       },\n//     ],\n//     onFilter:(value,record)=>{\n//       return record.taskName===value\n//     }\n//   },\n//   {\n//     title: 'Due Date',\n//     dataIndex: 'dueDate',\n//     key: 'due date',\n//   },\n//   {\n//     title: 'Assigned To',\n//     dataIndex: 'assigned',\n//     key: 'assigned to',\n//     filters: [\n//       {\n//         text: 'sravya',\n//         value: 'sravya',\n//       },\n//     ],\n//     onFilter:(value,record)=>{\n//       return record.assigned===value\n//     }\n//   },\n//  {\n//   title: 'status',\n//   dataIndex: 'status',\n//   key: 'status',\n//       filters: [\n//         {\n//           text: 'high',\n//           value: 'high',\n//         },\n//       ],\n//       onFilter:(value,record)=>{\n//         return record.status===value\n//       }\n    \n\n// },\n// {\n//   title: 'Description',\n//   dataIndex: 'description',\n//   key: 'description',\n// },\n// {\n//   title: 'Action',\n//   key: 'action',\n//   render:(record)=>{\n//     return(\n//       <>\n//       <EditOutlined  onClick={()=>onEditStudent(record)}/>\n     \n//        <DeleteOutlined  onClick={()=>onDeletrecord(record)} style={{color:'red' ,marginLeft:12}} \n//         /> \n     \n//       </>\n//     )\n//   }\n// },\n\n// ];\n\n\n\n/*const onFinish = (values) => {\n  console.log('Finish:', values);\n};*/ \n\n\n//  const onChangeSearchInput=(event)=>{\n//      const searchInput=event.target.value\n//      console.log(\"==============\",searchInput)\n//   //  console.log('click')\n//   //  {data.map(eachTable=>eachTable. taskName)}\n\n\n//   const result=newData.filter((eachValue)=>\n//  {\n//   //  console.log(eachValue.Object.keys(eachValue)[1])\n//   //  console.log(Object.keys(eachValue).length)\n//   //   for(let i=1;i<Object.keys(eachValue).length;i++){   \n//   //     console.log( eachValue[`${Object.keys(eachValue)[i]}`] )\n//   //     return  eachValue[`${Object.keys(eachValue)[i]}`].toLowerCase().includes(searchInput.toLowerCase())\n//   //     }\n//          if(searchInput===\"\"){\n//          console.log(\"------\",newSearch)\n//          setNewData(newSearch)\n//            return eachValue\n//          }else if(eachValue.taskName.toLowerCase().includes(searchInput.toLowerCase()) ||\n//          eachValue.assigned.toLowerCase().includes(searchInput.toLowerCase()) ||\n//          eachValue.status.toLowerCase().includes(searchInput.toLowerCase()) ||\n//          eachValue.description.toLowerCase().includes(searchInput.toLowerCase())){\n//            return eachValue\n//          }\n         \n//      }\n//     )\n//    console.log(result)\n//    setNewData(result)\n   \n//  }\n const showModelCheck=()=>{\n  setIsModalVisibleCheck(true)\n}\nconst onCheckBox=()=>{\n    setIsModalVisibleCheck(false)\n}\nconst onCheckCancle=()=>{\n   setIsModalVisibleCheck(false)\n}\n\nconst onFinishEditRow=(values)=>{\n  console.log(\"editroe\",values)\n const updateDataEditRow=[...dataSource]\n updateDataEditRow.splice(editRow,1 ,{...values, key:editRow})\n setDataSource(updateDataEditRow)\n console.log(\"ywo\",updateDataEditRow)\n setEditRow(null)\n}\n\n  return (\n    <div className=\"App\">  \n    {/* <div>\n    <Row> \n    <Col span={12}>\n         <h2 style={{ fontWeight: \"700\", fontSize: \"16px\", color: \"rgb(0 0 0 / 65%)\", marginBottom: \"0px\", marginTop: \"1%\" }}>New Task Work</h2>\n        <div style={{marginTop:'6px',marginBottom:'6px'}} style={{padding:'10px'}}>\n        <Input  size=\"small\"  placeholder=\"search\" suffix={<SearchOutlined />}\n        \n                     placeholder=\"Search\"\n                        // value={value}\n                        onChange={e => {\n                          const searchInput=e.target.value\n                          // let currValue = e.target.value;\n                          // setValue(currValue);\n                          setNewData(searchInput)\n  \n                          const filteredData =  newSearch.filter(entry =>\n                            entry.taskName !== null && entry.taskName.toLowerCase().includes(searchInput.toLowerCase())\n                          );\n                          // setLineRolesData(filteredData);\n                          setNewData(filteredData)\n                        }}>\n           \n        </Input> \n\n        </div>\n       \n     </Col>\n     <Col span={12}>  \n            <span style={{ float: \"right\" }}>  \n                  <Button type=\"primary\" onClick={showModal} style={{marginBottom: \"8px\", marginTop:\"10px\",marginRight:\"10px\",backgroundColor: \"rgb(8 158 164)\", color: \"white\", width: \"93px\", height: \"33px\"}}>New Task</Button>\n                    <div >\n                      {hasSelected===true ?<Button type=\"primary\" onClick={showModelCheck}\n                    >\n                        Reload\n                      </Button>:\"\"}\n                      <Modal width=\"70%\"  visible={isModalVisibleCheck}  onOk={onCheckBox} onCancel={onCheckCancle}>\n                      <Row gutter={[16, 16]} > \n                       \n                            <Table\n                  \n                            dataSource={newDataTo} \n                            columns={columns} >\n                              \n                            </Table>\n                      \n                      </Row>     \n                      </Modal>\n                      \n                  </div>\n            </span>  \n      </Col>\n      </Row>   \n      <Row> \n         <Modal   centered\n          width=\"50%\" title=\"Task Sravya\" visible={isModalVisible} onOk={handleOk} \n          onCancel={handleCancel} \n          >\n            <Row gutter={[16, 16]}> \n            <Col className=\"gutter-row\" span={12}>\n                <Form layout=\"vertical\"  width='70%' form={form}  onFinish={handleFinish} >  \n           \n                  <Col className=\"gutter-row\" span={12}> \n                      <Form.Item name=\"TaskName\" label=\"Task Name\" style={{ marginBottom: \"8px\" }}> \n                          <Input  width=\"50%\" placeholder=\"task name\" \n                          rules={[{ required: true, message: 'Please input your username!' }]}/>\n                      </Form.Item>\n                   </Col> \n\n                  <Col className=\"gutter-row\" span={12}>\n                      <Form.Item name=\"dueDate\" label=\"Due Date\" style={{ marginBottom: \"8px\" }}> \n                        <Space direction=\"vertical\" size={12}>   \n                            <DatePicker  onChange={onChange}/>\n                        </Space>\n                      </Form.Item>\n                \n                  </Col>\n                    \n                  <Col className=\"gutter-row\" span={12}>\n                      <Form.Item name=\"AssignedTo\" label=\"Assigned To\" style={{ marginBottom: \"8px\" }}>\n                      <Select\n                        allowClear style={{width:'90%' }}>\n                        {names.map((list,index)=>{\n                          return <Select.Option key={index} \n                        value={list}>{list}\n                      </Select.Option>\n\n                  })} \n                  \n                  </Select> \n                    </Form.Item>\n                \n                  </Col>\n\n                  <Col className=\"gutter-row\" span={12}>\n                  \n                    <Form.Item name=\"status\" label=\"status\" style={{ marginBottom: \"8px\" }}>\n                        <Select\n                        \n                          allowClear style={{width:'90%' }}>\n                        {status.map((lists,index)=>{\n                          return <Select.Option key={index} \n                            value={lists}>{lists}\n                            </Select.Option>\n\n                        })} \n                        \n                        </Select> \n                        </Form.Item>\n                \n                  </Col>\n                  <Col className=\"gutter-row\" > \n                \n                      <Form.Item name=\"Description\" label=\"Description\" style={{ marginBottom: \"8px\" }}>\n                      <TextArea rows={4} style={{ height: 90 ,width:820}} />\n                    </Form.Item>\n                \n                  </Col>\n                </Form>\n             </Col> \n            </Row>\n           </Modal>\n      </Row>\n      \n        \n   </div>\n    <div style={{padding:'10px'}}>\n    <Form form={form} onFinish={onFinishEditRow}> \n       <Table\n       rowSelection={{\n         type:\"checkbox\",\n         selectedRowKeys:selectedRowKeys,\n         onChange:(key)=>{\n            setSelectedRowKeys(key)\n          \n         },\n\n         onSelect:(record)=>{\n           setnewDataTo([...newDataTo,record])\n              console.log({record})\n       \n              console.log(\"######\",record)\n         }\n\n       }}\n        dataSource={newData} \n        columns={columns} >\n          \n       </Table>\n       </Form>\n       <Modal title=\"Edit student\" visible={isEditing} \n           okText=\"save\"\n           onCancel={()=>restStudentDetails()}\n \n            onOk={()=>{ setNewData(pre=>{\n              return pre.map(student=>{\n                if (student.id===editingStudent.id) {\n                  return  editingStudent\n                }else{\n                  return student\n                }\n\n              })\n            })\n             restStudentDetails()}}\n           >\n           <Input value={editingStudent?.taskName} onChange={(e)=>{setEditingStudent(pre=>{\n             return {...pre,taskName:e.target.value}\n           })}}/>\n           <Input value={editingStudent?.dueDate} onChange={(e)=>{setEditingStudent(pre=>{\n             return {...pre,dueDate:e.target.value}\n           })}}/>\n           <Input value={editingStudent?.assigned} onChange={(e)=>{setEditingStudent(pre=>{\n             return {...pre,assigned:e.target.value}\n           })}}/>\n             <Input value={editingStudent?.status} onChange={(e)=>{setEditingStudent(pre=>{\n             return {...pre,status:e.target.value}\n           })}}/>\n             <Input value={editingStudent?. description} onChange={(e)=>{setEditingStudent(pre=>{\n             return {...pre,description:e.target.value}\n           })}}/>\n\n           </Modal>\n    </div>\n   */}\n  </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}